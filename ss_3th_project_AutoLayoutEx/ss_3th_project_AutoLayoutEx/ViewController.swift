// 3주차

// UIKit
// -> iOS 또는 tvOS 앱을 위한 그래픽 기반의 UI를 구성하고 관리하는 프레임워크
// -> 제스쳐, 애니메이션, 그림 그리기, 이미지 처리 등 다양한 사용자 이벤트들을 처리
// -> 화면을 구성하기 위해 필수적으로 상속해야 함

// View
// -> iOS 어플리케이션 화면에서 보는 내용은 윈도우와 뷰를 사용하여 나타냄
// -> UIView 클래스나 UIView의 하위 클래스의 인스턴스로 윈도우의 한 영역에서 콘텐츠 표시
// -> 제스쳐 혹은 터치 이벤트 처리

// 뷰의 계층구조와 서브 뷰
// -> 다른 뷰를 위한 컨테이너로써의 역할도 병행
// -> 자식 뷰는 서브 뷰, 부모 뷰는 슈퍼 뷰로 불림
// -> 슈퍼 뷰와 서브 뷰 관계에 있을 경우 슈퍼 뷰가 서브 뷰에 가려짐
// -> 하나의 슈퍼 뷰에 두 개 이상의 서브 뷰가 겹치게 된다면 나중에 추가된 서브 뷰가 맨 위에 보여짐

// 오토레이아웃
// -> 안드로이드의 Constraint layout과 유사
// -> 다양한 디바이스 크기에 대응하기 위해 사용
// -> 뷰에 주어진 조건에 따라 동적으로 계산하여 크기 조절하여 내, 외부 변화에 동적으로 반응

// 오토레이아웃의 사용 목적
// -> 디바이스의 크기가 다양한 경우
// -> 디바이스를 회전할 경우
// -> 지역화(다국어)를 지원하는 경우
// -> 콘텐츠가 동적으로 보여지는 경우
// -> 상태표시줄에 녹음 시 나타나는 오디오바와 전화 중에 나타나는 액티프 콜이 보여지거나 사라질 경우

// Constant와 Multiplier
// Constant : 뷰와 레이아웃의 간격(값)
// Multiplier : 뷰와 레이아웃간의 비율(%)

// 안전영역(Safe Area)
// -> 새로운 디바이스(노치)가 등장하면서 새로 생긴 개념
// -> 콘텐츠가 상태바, 네비게이션바, 툴바, 탭바를 가리는 것을 방지하는 영역

// 기존의 레이아웃 vs 안전영역
// -> SafeArea없이 사용할 경우 SuperView를 가리키므로 탭바, 네비게이션 바 포함되므로 노치가 적용된 기기에 대응하기 힘듦

// 프로그래밍으로 제어한다면?
// -> 스토리보드에서 해당 Constraint 객체를 코드와 연결
// -> Constant 혹은 multiplier 값을 변경

// 오토레이아웃 - 인터페이스 빌더
// 1. 중앙 이미지 클릭 후 스토리보드 하단 Add new Constraints 버튼 클릭
// 2. 가로(width), 세로(height) 150 후 Add -> 빨간색 줄 나오는데 잘 된 것
// 3. 하단 차트모양 버튼 클릭 후 x축 y축 정중앙 체크 후 Add -> 가운데로 위치하게 됨
// 4. 스택 뷰 클릭
// 5. 윗쪽 선 해제 후 왼쪽 20, 오른쪽 20, 하단 20 설정 -> 상단 거리 제외한 하단 중앙에 위치하게 됨

import UIKit

class ViewController: UIViewController {

    @IBOutlet weak var imageView: UIImageView!
    @IBOutlet weak var stackView: UIStackView!

    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
}

